{"project": "nilearn", "project_url": "https://nilearn.github.io", "show_commit_url": "https://github.com/nilearn/nilearn/commit/", "hash_length": 8, "revision_to_hash": {"0": "726bf42b6114808b00d4514e934b37bf81a7701e"}, "revision_to_date": {"0": 1744725247000}, "params": {"arch": ["x86_64"], "cpu": ["AMD EPYC 7763 64-Core Processor"], "machine": ["fv-az1113-357"], "num_cpu": ["4"], "os": ["Linux 6.8.0-1021-azure", "Linux 6.8.0-1025-azure"], "ram": ["16373784", "16373792"], "python": ["3.9"], "numpy": ["1.22.4"], "scipy": ["1.8.0"], "joblib": ["1.2.0"], "pandas": ["2.2.0"], "scikit-learn": ["1.4.0"], "nibabel": ["5.2.0"], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1113-357", "num_cpu": "4", "os": "Linux 6.8.0-1025-azure", "ram": "16373784", "python": "3.9", "numpy": "1.22.4", "scipy": "1.8.0", "joblib": "1.2.0", "pandas": "2.2.0", "scikit-learn": "1.4.0", "nibabel": "5.2.0", "branch": "main"}], "benchmarks": {"comparisons.image.CompareLoad.peakmem_compare_load": {"code": "class CompareLoad:\n    def peakmem_compare_load(self, loader):\n        \"\"\"Peak memory of loading images.\"\"\"\n        load(loader)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "comparisons.image.CompareLoad.peakmem_compare_load", "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "3393740643191f76a29d308527385e2193f76115a50909037fe16e954ffb1db3"}, "comparisons.image.CompareLoad.time_compare_load": {"code": "class CompareLoad:\n    def time_compare_load(self, loader):\n        \"\"\"Time the loading of images.\"\"\"\n        load(loader)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "comparisons.image.CompareLoad.time_compare_load", "number": 0, "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "d0f6bbea6406b5d2a9b78b4376f290309f6669c041393740442ad308a8205d67", "warmup_time": -1}, "comparisons.image.CompareMean.peakmem_compare_mean": {"code": "class CompareMean:\n    def peakmem_compare_mean(self, loader):\n        \"\"\"Peak memory of loading followed by taking the mean.\"\"\"\n        img = load(loader)[1]\n        mean_img(img)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "comparisons.image.CompareMean.peakmem_compare_mean", "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "15421e0fb233fb1f09563fc57931acc6f19b316cb0ea02ec7c81b26fc9801e57"}, "comparisons.image.CompareMean.time_compare_mean": {"code": "class CompareMean:\n    def time_compare_mean(self, loader):\n        \"\"\"Time the loading followed by taking the mean.\"\"\"\n        img = load(loader)[1]\n        mean_img(img)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "comparisons.image.CompareMean.time_compare_mean", "number": 0, "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "372b66141c4915e5bed9c8a824a440b875b0767c54fe1a652a661145d21bb5ab", "warmup_time": -1}, "comparisons.image.CompareSlice.peakmem_compare_slice": {"code": "class CompareSlice:\n    def peakmem_compare_slice(self, loader):\n        \"\"\"Peak memory of loading the image followed by extracting a\n        slice of it.\n        \"\"\"\n        img = load(loader)[1]\n        img.dataobj[..., 0]\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "comparisons.image.CompareSlice.peakmem_compare_slice", "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "147669a40e2c9d937e9ab5c7b8769bdc625e61d1a45a8a4dd0004b5e565882fc"}, "comparisons.image.CompareSlice.time_compare_slice": {"code": "class CompareSlice:\n    def time_compare_slice(self, loader):\n        \"\"\"Time the loading the image followed by extracting a slice of it.\"\"\"\n        img = load(loader)[1]\n        img.dataobj[..., 0]\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "comparisons.image.CompareSlice.time_compare_slice", "number": 0, "param_names": ["loader"], "params": [["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "b073c1dfb39dd39376abb60a70f951a04446831fb7f3a239f9f1c7069ed07c43", "warmup_time": -1}, "comparisons.maskers.CompareMask.peakmem_compare_mask": {"code": "class CompareMask:\n    def peakmem_compare_mask(self, implementation, loader):\n        \"\"\"Peak memory of loading and then masking.\"\"\"\n        mask, img = load(loader)\n        apply_mask(mask, img, implementation)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "comparisons.maskers.CompareMask.peakmem_compare_mask", "param_names": ["implementation", "loader"], "params": [["'nilearn'", "'numpy (ref)'"], ["'nilearn'", "'nibabel (ref)'"]], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "754b2b03d751cd0e1c6a376b4e66378ef262110b29b9bb4f7e88fd2743c1e98e"}, "comparisons.maskers.CompareMask.time_compare_mask": {"code": "class CompareMask:\n    def time_compare_mask(self, implementation, loader):\n        \"\"\"Time the loading and then masking.\"\"\"\n        mask, img = load(loader)\n        apply_mask(mask, img, implementation)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "comparisons.maskers.CompareMask.time_compare_mask", "number": 0, "param_names": ["implementation", "loader"], "params": [["'nilearn'", "'numpy (ref)'"], ["'nilearn'", "'nibabel (ref)'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "1d55dcaf0e1f7cebfe880c443c7010e1d3912298f2e6f574b8213b1e9ba426de", "warmup_time": -1}, "tracking.image.LoadImgBenchmark.peakmem_load_img": {"code": "class LoadImgBenchmark:\n    def peakmem_load_img(self):\n        \"\"\"Peak memory of loading images.\"\"\"\n        load(\"nilearn\")\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "tracking.image.LoadImgBenchmark.peakmem_load_img", "param_names": [], "params": [], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "4bda072ff04b5b4bb23c72854b877c7ee49107347e3335ecd6bd15a59edd0ffb"}, "tracking.image.LoadImgBenchmark.time_load_img": {"code": "class LoadImgBenchmark:\n    def time_load_img(self):\n        \"\"\"Time the loading of images.\"\"\"\n        load(\"nilearn\")\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "tracking.image.LoadImgBenchmark.time_load_img", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "0a59a55aeaebc99998d456bcc2e1cff82612e134f99ae9845def891ea7a6a37b", "warmup_time": -1}, "tracking.image.MeanImgBenchmark.peakmem_mean_img": {"code": "class MeanImgBenchmark:\n    def peakmem_mean_img(self):\n        \"\"\"Peak memory of loading followed by taking the mean.\"\"\"\n        img = load(\"nilearn\")[1]\n        mean_img(img)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "tracking.image.MeanImgBenchmark.peakmem_mean_img", "param_names": [], "params": [], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "7bc4161dca76ed2951ccbc87c8c1435949a55347a7cf2d562dec74ff9851b647"}, "tracking.image.MeanImgBenchmark.time_mean_img": {"code": "class MeanImgBenchmark:\n    def time_mean_img(self):\n        \"\"\"Time the loading followed by taking the mean.\"\"\"\n        img = load(\"nilearn\")[1]\n        mean_img(img)\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "tracking.image.MeanImgBenchmark.time_mean_img", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "66ef2c9f2c44437db2d865c711f0b6a510059db26503c2864a594953803b21ba", "warmup_time": -1}, "tracking.maskers.NiftiMaskerBenchmark.peakmem_nifti_masker": {"code": "class NiftiMaskerBenchmark:\n    def peakmem_nifti_masker(self, smoothing_fwhm, detrend):\n        \"\"\"Peak memory for the loading (only with nilearn here) and then\n        masking with different parameters.\n        \"\"\"\n        mask, img = load(\"nilearn\")\n        apply_mask(\n            mask,\n            img,\n            \"nilearn\",\n            nifti_masker_params={\n                \"smoothing_fwhm\": smoothing_fwhm,\n                \"detrend\": detrend,\n            },\n        )\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "name": "tracking.maskers.NiftiMaskerBenchmark.peakmem_nifti_masker", "param_names": ["smoothing_fwhm", "detrend"], "params": [["None", "6"], ["False", "True"]], "setup_cache_key": "common:14", "type": "peakmemory", "unit": "bytes", "version": "a14fceed8ba6d819539e86ac59917e73a6dfd6b1f2590e0ce2d99d64ed65d104"}, "tracking.maskers.NiftiMaskerBenchmark.time_nifti_masker": {"code": "class NiftiMaskerBenchmark:\n    def time_nifti_masker(self, smoothing_fwhm, detrend):\n        \"\"\"Time the loading (only with nilearn here) and then masking with\n        different parameters.\n        \"\"\"\n        mask, img = load(\"nilearn\")\n        apply_mask(\n            mask,\n            img,\n            \"nilearn\",\n            nifti_masker_params={\n                \"smoothing_fwhm\": smoothing_fwhm,\n                \"detrend\": detrend,\n            },\n        )\n\nclass Benchmark:\n    def setup_cache(self, n_subjects=10, n_masks=1):\n        \"\"\"Set up the cache directory with the necessary images and masks.\n    \n        The fMRI image is created by concatenating n_subjects subject images\n        from :func:`nilearn.datasets.fetch_adhd`. The masks are created by\n        resampling the atlas from\n        :func:`nilearn.datasets.fetch_atlas_basc_multiscale_2015` to the fMRI\n        image and then creating masks for each region in the atlas.\n    \n        Parameters\n        ----------\n        n_subjects : int, optional, default=10\n            The number of subject images concatenated together to create the\n            fMRI image.\n        n_masks : int, optional, default=1\n            The number of masks to create.\n        \"\"\"\n        # get an image\n        fmri_data = fetch_adhd(n_subjects=n_subjects)\n        concat = concat_imgs(fmri_data.func)\n        concat.to_filename(f\"fmri_{n_subjects}.nii.gz\")\n    \n        # get a mask\n        atlas_path = fetch_atlas_schaefer_2018(n_rois=100).maps\n        resampled_atlas = resample_to_img(\n            atlas_path,\n            concat,\n            interpolation=\"nearest\",\n            force_resample=True,\n        )\n        for idx in range(1, n_masks + 1):\n            mask = resampled_atlas.get_fdata() == idx\n            mask_img = new_img_like(\n                resampled_atlas,\n                mask,\n                affine=resampled_atlas.affine,\n                copy_header=True,\n            )\n            mask_img.to_filename(f\"mask_{idx}.nii.gz\")", "min_run_count": 2, "name": "tracking.maskers.NiftiMaskerBenchmark.time_nifti_masker", "number": 0, "param_names": ["smoothing_fwhm", "detrend"], "params": [["None", "6"], ["False", "True"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "common:14", "type": "time", "unit": "seconds", "version": "113bad4fde2f777ae46d3e1fc62ceab426bf32082725962697f30b5e991d6400", "warmup_time": -1}}, "machines": {"fv-az1113-357": {"arch": "x86_64", "cpu": "AMD EPYC 7763 64-Core Processor", "machine": "fv-az1113-357", "num_cpu": "4", "os": "Linux 6.8.0-1025-azure", "ram": "16373784", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}